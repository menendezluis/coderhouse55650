paths:
  /api/users:
    get:
      summary: Obtiene todos los usuarios
      tags:
        - Users
      responses:
        "200":
          description: Los usuarios fueron obtenidos exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/User"
        "500":
          description: Error interno del servidor, posiblemente generado por una query defectuosa
  /api/users/{uid}:
    get:
      summary: Este endpoint recupera la informacion de un usuario
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: id del usuario que se desea solicitar
          schema:
            $type: string
      responses:
        "200":
          description: Usuario obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        "500":
          description: Error interno del servidor, posiblemente generado por una query defectuosa
    put:
      summary: Actualiza la información de un usuario
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: id del usuario que se desea actualizar
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/updateUser"
      responses:
        "200":
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        "400":
          description: Información proporcionada es inválida
        "500":
          description: Error interno del servidor
  /api/users/:
    post:
      summary: Este endpoint permite crear un usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/createUser"
      responses:
        "200":
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        "500":
          description: Error interno del servidor, posiblemente generado por una query defectuosa

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id autogenerado de mongo
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: Email del usuario
        password:
          type: String
          description: Password del usuario
        role:
          type: String
          description: Rol del usuario
        pets:
          type: array
          items:
            type: String
          description: IDs de Mongo de las mascotas del usuario
      example:
        _id: ObjectId("6abcd1345qxsadfd91as0")
        first_name: "Luis"
        last_name: "Menendez"
        email: "luis@gmail.com"
        password: "df#adsfs@$adfsdfs%SDSF%sgdsfgs$$$Ssadfsdg%fgdgd990fgsadfgf@@#$%@%"
        role: "user"
        pets: ["5e9f8f8f8f8f8f8f8f8f8f8", "6a7b8c8d9e0f1a2b3c4d5e6f"]
  requestBodies:
    createUser:
      type: object
      properties:
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: Correo electronico del usuario
        password:
          type: String
          description: Password del usuario
      example:
        first_name: Juanito
        last_name: Caminante
        email: johny_walker@gmail.com
        password: 123456abc
    updateUser:
      type: object
      properties:
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: Email del usuario
        password:
          type: String
          description: Password del usuario
        role:
          type: String
          description: Rol del usuario
        pets:
          type: array
          items:
            type: String
          description: IDs de Mongo de las mascotas del usuario
      example:
        first_name: "Luis"
        last_name: "Menendez"
        email: "luis_updated@gmail.com"
        password: "newPassword1234"
        role: "admin"
        pets: ["5e9f8f8f8f8f8f8f8f8f8f8", "6a7b8c8d9e0f1a2b3c4d5e6f"]
